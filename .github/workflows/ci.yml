name: ci
on: [push, pull_request]

jobs:
  build_linux:
    strategy:
      fail-fast: false
      matrix:
        buildtype: [release, dev, debug]
    runs-on: ubuntu-latest
    container: "debian:bookworm"
    steps:
    - name: setup
      uses: actions/github-script@v6
      with:
        script: |
          core.exportVariable('ACTIONS_CACHE_URL', process.env.ACTIONS_CACHE_URL);
          core.exportVariable('ACTIONS_RUNTIME_TOKEN', process.env.ACTIONS_RUNTIME_TOKEN);
    - name: install
      run: |
        apt-get update
        apt-get -y install g++ git meson ninja-build python3 qtdeclarative5-dev  \
          `#vcpkg:` cmake curl make pkg-config zip
    - name: checkout
      uses: actions/checkout@v4
      with:
        submodules: true
    - name: configure
      env:
        VCPKG_BINARY_SOURCES: clear;x-gha,readwrite
      run: ./configure --buildtype=${{matrix.buildtype}} --flags=-Werror
    - name: build
      run: ninja -C build -k 0
    - name: test
      run: ninja -C build test
    - name: dist
      run: ./dist
    - name: upload dist
      uses: actions/upload-artifact@v3
      with:
        name: debian-${{matrix.buildtype}}
        path: build/komankondi.tar.xz

  lint_linux:
    strategy:
      fail-fast: false
      matrix:
        buildtype: [release, debug]
    runs-on: ubuntu-22.04
    container: "debian:bookworm"
    steps:
    - name: setup
      uses: actions/github-script@v6
      with:
        script: |
          core.exportVariable('ACTIONS_CACHE_URL', process.env.ACTIONS_CACHE_URL);
          core.exportVariable('ACTIONS_RUNTIME_TOKEN', process.env.ACTIONS_RUNTIME_TOKEN);
    - name: install
      run: |
        apt-get update
        apt-get -y install g++ git meson ninja-build python3 qtdeclarative5-dev  \
          `#vcpkg:` cmake curl make pkg-config zip  \
          `#lint:` black clang-format clang-tidy pylint
    - name: checkout
      uses: actions/checkout@v4
      with:
        submodules: true
    - name: configure
      env:
        VCPKG_BINARY_SOURCES: clear;x-gha,readwrite
      run: ./configure --buildtype=${{matrix.buildtype}}
    - name: lint
      run: |
        chown $(id -u) .
        ./lint

  build_windows:
    strategy:
      fail-fast: false
      matrix:
        buildtype: [release, dev, debug]
    runs-on: windows-latest
    steps:
    - name: setup
      uses: actions/github-script@v6
      with:
        script: |
          core.exportVariable('ACTIONS_CACHE_URL', process.env.ACTIONS_CACHE_URL);
          core.exportVariable('ACTIONS_RUNTIME_TOKEN', process.env.ACTIONS_RUNTIME_TOKEN);
    - name: install
      run: |
        echo "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Tools\Llvm\x64\bin" >>"$env:GITHUB_PATH"
        pip install aqtinstall==3.1.7 meson==1.2.2 ninja==1.11.1
        aqt install-qt -O "$env:RUNNER_TEMP\qt" windows desktop 5.15.2 win64_msvc2019_64 --archives qtbase qtdeclarative qttools
        echo "$env:RUNNER_TEMP\qt\5.15.2\msvc2019_64\bin" >>"$env:GITHUB_PATH"
    - name: checkout
      uses: actions/checkout@v4
      with:
        submodules: true
    - name: configure
      env:
        CXX: clang++
        CXX_LD: lld
        VCPKG_BINARY_SOURCES: clear;x-gha,readwrite
      run: python configure --buildtype=${{matrix.buildtype}} --flags=-Werror
    - name: build
      run: ninja -C build -k 0
    - name: test
      run: ninja -C build test
    - name: dist
      run: python dist
    - name: upload dist
      uses: actions/upload-artifact@v3
      with:
        name: windows-${{matrix.buildtype}}
        path: build/komankondi.zip

  lint_windows:
    strategy:
      fail-fast: false
      matrix:
        buildtype: [release, debug]
    runs-on: windows-latest
    steps:
    - name: setup
      uses: actions/github-script@v6
      with:
        script: |
          core.exportVariable('ACTIONS_CACHE_URL', process.env.ACTIONS_CACHE_URL);
          core.exportVariable('ACTIONS_RUNTIME_TOKEN', process.env.ACTIONS_RUNTIME_TOKEN);
    - name: install
      run: |
        echo "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Tools\Llvm\x64\bin" >>"$env:GITHUB_PATH"
        pip install aqtinstall==3.1.7 meson==1.2.2 ninja==1.11.1
        aqt install-qt -O "$env:RUNNER_TEMP\qt" windows desktop 5.15.2 win64_msvc2019_64 --archives qtbase qtdeclarative qttools
        echo "$env:RUNNER_TEMP\qt\5.15.2\msvc2019_64\bin" >>"$env:GITHUB_PATH"
    - name: checkout
      uses: actions/checkout@v4
      with:
        submodules: true
    - name: configure
      env:
        CXX: clang++
        CXX_LD: lld
        VCPKG_BINARY_SOURCES: clear;x-gha,readwrite
      run: python configure --buildtype=${{matrix.buildtype}}
    - name: lint
      run: python lint clang-tidy
