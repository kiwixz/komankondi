#!/usr/bin/env python3

import argparse
import shlex
import shutil
import subprocess
from pathlib import Path


def run(args):
    print('>', shlex.join(str(a) for a in args))
    r = subprocess.run(args).returncode
    if r != 0:
        exit(r)


def configure_vcpkg(install_dir, toolchain):
    vcpkg_dir = Path('vcpkg')
    vcpkg_tool = vcpkg_dir / 'vcpkg'
    if not vcpkg_tool.exists():
        run([vcpkg_dir / 'bootstrap-vcpkg.sh', '-disableMetrics'])
    run([vcpkg_tool, f'--x-install-root={install_dir}', '--overlay-ports=vcpkg_ports', 'install', '--no-print-usage'])

    with open(toolchain, 'w') as f:
        f.write('\n'.join([
            '[properties]',
            f"cmake_toolchain_file = '{Path('vcpkg/scripts/buildsystems/vcpkg.cmake').absolute()}'",
            '[cmake]',
            f"VCPKG_INSTALLED_DIR = '{install_dir.absolute()}'",
        ]))


def configure_meson(build_dir, meson_args, vcpkg_toolchain):
    version_string = subprocess.run(['meson', '-v'], stdout=subprocess.PIPE, check=True, text=True).stdout
    version = tuple(int(a) for a in version_string.split('.'))

    options = [
        f'--native-file={vcpkg_toolchain}',
        '--default-library=static',
        '--strip',
        '-Dbackend_max_links=2',
    ]

    if version >= (0, 63, 0):
        options += ['--prefer-static']

    cxxflags = [
        '-march=x86-64-v2',
        '-D_GLIBCXX_ASSERTIONS',
        '-U_FORTIFY_SOURCE', '-D_FORTIFY_SOURCE=3',
        '-fstack-protector-strong',
    ]

    if build_type == 'debug':
        options += ['-Doptimization=g']
        cxxflags += ['-g3']
    else:
        options += ['--buildtype=release', '-Db_ndebug=true', '-Db_lto=true']
        cxxflags += ['-Ofast']

    options += ['-Dcpp_args=' + ' '.join(cxxflags)]
    run(['meson', 'setup'] + options + meson_args + [build_dir])


parser = argparse.ArgumentParser()
parser.add_argument('--buildtype', default='release', choices=['release', 'debug'])
parser.add_argument('builddir', nargs='?', default='build', help='Build directory')

args, meson_args = parser.parse_known_args()
build_dir = Path(args.builddir)
build_type = args.buildtype

shutil.rmtree(build_dir, True)

build_dir.mkdir()
with open(build_dir / '.gitignore', 'w') as f:
    f.write('*')

vcpkg_toolchain = build_dir / 'meson-vcpkg.ini'
configure_vcpkg(build_dir / 'vcpkg_installed', vcpkg_toolchain)

configure_meson(build_dir, meson_args, vcpkg_toolchain)
