#!/usr/bin/env python3

import argparse
import shlex
import shutil
import subprocess
import sys
from pathlib import Path


def run(args):
    print(">", shlex.join(str(a) for a in args), flush=True)
    r = subprocess.run(args).returncode
    if r != 0:
        sys.exit(r)


def configure_vcpkg(install_dir, build_type, toolchain):
    vcpkg_dir = Path("vcpkg")
    vcpkg_tool = vcpkg_dir / ("vcpkg.exe" if sys.platform == "win32" else "vcpkg")
    if not vcpkg_tool.exists():
        bootstrap = "bootstrap-vcpkg." + ("bat" if sys.platform == "win32" else "sh")
        run([vcpkg_dir / bootstrap, "-disableMetrics"])

    triplet = "x64-windows-static" if sys.platform == "win32" else "x64-linux"
    run(
        [
            vcpkg_tool,
            f"--x-install-root={install_dir}",
            f"--triplet={triplet}",
            "--overlay-ports=vcpkg_ports",
            "install",
            "--no-print-usage",
        ]
    )

    with open(toolchain, "w") as f:
        f.write(
            "\n".join(
                [
                    "[properties]",
                    f"cmake_toolchain_file='{Path('vcpkg/scripts/buildsystems/vcpkg.cmake').absolute()}'",
                    "[built-in options]",
                    f"pkg_config_path='{install_dir.absolute() / triplet / ('debug' if build_type == 'debug' else '') / 'lib/pkgconfig'}'",
                    "[cmake]",
                    f"VCPKG_INSTALLED_DIR='{install_dir.absolute()}'",
                    f"VCPKG_TARGET_TRIPLET='{triplet}'",
                ]
            )
        )


def configure_meson(build_dir, build_type, flags, vcpkg_toolchain):
    options = [f"--native-file={vcpkg_toolchain}", "--default-library=static"]
    cxxflags = ["-march=x86-64-v3"]

    if build_type == "debug":
        options += ["--optimization=g"]
        if sys.platform == "win32":
            cxxflags += ["-D_DEBUG"]
        else:
            options += ["-Db_sanitize=address,undefined"]
    else:
        options += ["--buildtype=release"]
        cxxflags += ["-Ofast"]

    if build_type == "release":
        options += ["-Db_lto=true", "-Db_ndebug=true"]
        if sys.platform != "win32":
            options += ["--strip"]
    else:
        cxxflags += [
            "-g3",
            "-fno-omit-frame-pointer",
            "-fstack-protector-strong",
            "-D_GLIBCXX_ASSERTIONS",
            "-U_FORTIFY_SOURCE",
            "-D_FORTIFY_SOURCE=3",
        ]

    if flags:
        options += [f"-Dcpp_link_args={flags}"]
        cxxflags += [flags]

    options += [f"-Dcpp_args={' '.join(cxxflags)}"]
    run(["meson", "setup", *options, build_dir])


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("--buildtype", default="release", choices=["release", "dev", "debug"])
    parser.add_argument("--flags", help="Compiler flags")
    parser.add_argument("builddir", nargs="?", type=Path, default="build", help="Build directory")
    args = parser.parse_args()

    shutil.rmtree(args.builddir, True)

    args.builddir.mkdir()
    with open(args.builddir / ".gitignore", "w") as f:
        f.write("*")

    vcpkg_toolchain = args.builddir / "meson-vcpkg.ini"
    configure_vcpkg(args.builddir / "vcpkg_installed", args.buildtype, vcpkg_toolchain)
    configure_meson(args.builddir, args.buildtype, args.flags, vcpkg_toolchain)


if __name__ == "__main__":
    sys.exit(main())
