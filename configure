#!/usr/bin/env python3

import argparse
import shlex
import shutil
import subprocess
import sys
from pathlib import Path


def run(args):
    print('>', shlex.join(str(a) for a in args), flush=True)
    r = subprocess.run(args).returncode
    if r != 0:
        sys.exit(r)


def configure_vcpkg(install_dir, toolchain):
    vcpkg_dir = Path('vcpkg')
    vcpkg_tool = vcpkg_dir / 'vcpkg'
    if not vcpkg_tool.exists():
        bootstrap = 'bootstrap-vcpkg.' + ('bat' if sys.platform == 'win32' else 'sh')
        run([vcpkg_dir / bootstrap, '-disableMetrics'])

    triplet = 'x64-windows-static' if sys.platform == 'win32' else 'x64-linux'
    run([
        vcpkg_tool,
        f'--x-install-root={install_dir}',
        f'--triplet={triplet}',
        '--overlay-ports=vcpkg_ports',
        'install',
        '--no-print-usage',
    ])

    with open(toolchain, 'w') as f:
        f.write('\n'.join([
            '[properties]',
            f"cmake_toolchain_file = '{Path('vcpkg/scripts/buildsystems/vcpkg.cmake').absolute()}'",
            '[cmake]',
            f"VCPKG_INSTALLED_DIR = '{install_dir.absolute()}'",
            f"VCPKG_TARGET_TRIPLET = '{triplet}'",
        ]))


def configure_meson(build_dir, flags, vcpkg_toolchain):
    options = [f'--native-file={vcpkg_toolchain}', '--default-library=static']
    cxxflags = ['-march=x86-64-v2']

    if build_type == 'debug':
        options += ['-Doptimization=g']
        cxxflags += ['-g3']
        if sys.platform == 'win32':
            cxxflags += ['-D_DEBUG']
    else:
        options += ['--buildtype=release']
        cxxflags += ['-Ofast']

    if build_type == 'release':
        options += ['-Db_lto=true', '-Db_ndebug=true']
    else:
        cxxflags += ['-D_GLIBCXX_ASSERTIONS', '-U_FORTIFY_SOURCE', '-D_FORTIFY_SOURCE=3', '-fstack-protector-strong']

    if flags:
        options += [f'-Dcpp_link_args={flags}']
        cxxflags += [flags]

    options += ['-Dcpp_args=' + ' '.join(cxxflags)]
    run(['meson', 'setup', *options, build_dir])


parser = argparse.ArgumentParser()
parser.add_argument('--buildtype', default='release', choices=['release', 'dev', 'debug'])
parser.add_argument('--flags', help='Compiler flags')
parser.add_argument('builddir', nargs='?', default='build', help='Build directory')

args = parser.parse_args()
build_dir = Path(args.builddir)
build_type = args.buildtype
flags = args.flags

shutil.rmtree(build_dir, True)

build_dir.mkdir()
with open(build_dir / '.gitignore', 'w') as f:
    f.write('*')

vcpkg_toolchain = build_dir / 'meson-vcpkg.ini'
configure_vcpkg(build_dir / 'vcpkg_installed', vcpkg_toolchain)

configure_meson(build_dir, flags, vcpkg_toolchain)
