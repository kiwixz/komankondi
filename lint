#!/usr/bin/env python3

import argparse
import concurrent.futures
import difflib
import functools
import math
import multiprocessing
import subprocess
import sys
from concurrent.futures import ThreadPoolExecutor
from dataclasses import dataclass
from pathlib import Path
from typing import Optional


@dataclass
class TaskResult:
    name: str
    success: bool
    comment: Optional[str]


def make_patch(path, original, formatted):
    def colorize(line):
        if line[0] == "+":
            return f"\033[32m{line}\033[0m"
        elif line[0] == "-":
            return f"\033[31m{line}\033[0m"
        else:
            return line

    patch = list(difflib.unified_diff(original.splitlines(), formatted.splitlines(), str(path), "formatted"))
    return "".join(patch[:3]) + "".join(f"{colorize(line)}\n" for line in patch[3:])


def lint_clang_format(fix, build_dir, files):
    def _check_file(path):
        with open(path, encoding="utf8") as f:
            original = f.read()
        formatted = subprocess.check_output(["clang-format", "-assume-filename", path], input=original, text=True)
        return TaskResult(f"clang-format: {path}", original == formatted, make_patch(path, original, formatted))

    def _format_file(path):
        r = subprocess.run(["clang-format", "-i", path])
        return TaskResult(f"clang-format: {path}", r.returncode == 0, None)

    todo_files = filter(lambda f: f.suffix in (".cpp", ".hpp"), files)
    return [functools.partial(_format_file if fix else _check_file, f) for f in todo_files]


def lint_clang_tidy(fix, build_dir, files):
    cmd = [
        "clang-tidy",
        "--quiet",
        "--use-color",
        "--warnings-as-errors=*",
        "--extra-arg=-Wno-unknown-warning-option",
        "-p",
        build_dir,
    ]
    if fix:
        cmd += ["--fix-errors", "--fix-notes"]

    def _lint(path):
        r = subprocess.run([*cmd, path], stdout=subprocess.PIPE, stderr=subprocess.DEVNULL, text=True)
        return TaskResult(f"clang-tidy: {path}", r.returncode == 0, r.stdout)

    todo_files = filter(lambda f: f.suffix == ".cpp", files)
    return [functools.partial(_lint, f) for f in todo_files]


def lint_black(fix, build_dir, files):
    def _check_file(path):
        with open(path, encoding="utf8") as f:
            original = f.read()
        formatted = subprocess.check_output(["black", "-q", "-"], input=original, text=True)
        return TaskResult(f"black: {path}", original == formatted, make_patch(path, original, formatted))

    def _format_file(path):
        r = subprocess.run(["black", "-q", path])
        return TaskResult(f"black: {path}", r.returncode == 0, None)

    todo_files = ["configure", "dist", "lint"] + list(filter(lambda f: f.suffix == ".py", files))
    return [functools.partial(_format_file if fix else _check_file, f) for f in todo_files]


def lint_qmllint(fix, build_dir, files):
    def _lint(path):
        r = subprocess.run(["qmllint", path], stderr=subprocess.PIPE, text=True)
        return TaskResult(f"qmllint: {path}", r.returncode == 0, r.stderr)

    todo_files = filter(lambda f: f.suffix == ".qml", files)
    return [functools.partial(_lint, f) for f in todo_files]


def print_error(msg):
    print(f"\033[31;1m{msg}\033[0m")


def main():
    tasks = {
        "clang-format": lint_clang_format,
        "clang-tidy": lint_clang_tidy,
        "black": lint_black,
        "qmllint": lint_qmllint,
    }

    parser = argparse.ArgumentParser()
    parser.add_argument("--fix", "-f", action="store_true", help="Attempt to fix the problems")
    parser.add_argument("--threads", "-j", type=int, default=multiprocessing.cpu_count(), help="Number of threads")
    parser.add_argument("builddir", nargs="?", type=Path, default="build", help="Build directory")
    parser.add_argument("tasks", nargs="*", choices=(*tasks, []), default=[], help="Tasks to run")
    args = parser.parse_args()

    files = list(
        filter(Path.exists, (Path(f) for f in subprocess.check_output(["git", "ls-files"], text=True).splitlines()))
    )
    todo = list(sum((tasks[t](args.fix, args.builddir, files) for t in args.tasks or tasks), []))

    total = len(todo)
    if total == 0:
        return 0

    total_digits = int(math.log10(total)) + 1

    failed = 0
    with ThreadPoolExecutor(args.threads) as executor:
        done = 0
        for future in concurrent.futures.as_completed(executor.submit(op) for op in todo):
            done += 1
            r = future.result()
            if r.success:
                print(f"[{done:{total_digits}}/{total}] passed: {r.name}")
            else:
                failed += 1
                print_error(f"[{done:{total_digits}}/{total}] FAILED: {r.name}")
                if r.comment:
                    print(r.comment)
            sys.stdout.flush()

    if failed:
        print_error(f"\n{failed} tasks failed")
        return 1


if __name__ == "__main__":
    sys.exit(main())
